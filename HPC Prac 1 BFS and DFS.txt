#include<iostream>
#include<vector>
#include<queue>
#include<omp.h>
#include<mutex>

using namespace std;

class Graph
{
    int V;
    vector<vector<int>> adj;
    
    public:
        
        Graph(int V) : V(V), adj(V) {}
        
        void addEdge(int u, int v)
        {
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        void parallelDFS(int start)
        {
            vector<bool> visited(V, false);
            
            #pragma omp parallel 
            {
                #pragma omp critical
                {
                    dfsUtil(start, visited);
                }
            }
            cout<<endl;
        }
        
        void dfsUtil(int v, vector<bool>& visited)
        {
            visited[v] = true;
            cout<<v<<" ";
            
            #pragma omp parallel for
            {
                for(int i=0; i<adj[v].size(); ++i)
                {
                    int n = adj[v][i];
                    
                    #pragma omp critical
                    {
                        if(!visited[n])
                        {
                            visited[n] = true;
                            dfsUtil(n, visited);
                        }
                    }
                }
            }
        }
        
        void parallelBFS(int start)
        {
            vector<bool> visited(V, false);
            queue<int> q;
            mutex qmutex;
            
            visited[start] = true;
            q.push(start);
            
            while(true)
            {
                int size = q.size();
                
                if(size==0)
                {
                    break;
                }
                
                #pragma omp parallel for
                {
                    int v;
                    for(int i=0; i<size; ++i)
                    {
                        qmutex.lock();
                        if(!q.empty())
                        {
                            v = q.front();
                            q.pop();
                            qmutex.unlock();
                        }
                        else
                        {
                            qmutex.unlock();
                            continue;
                        }
                        cout<<v<<" ";
                        
                        for(int n : adj[v])
                        {
                            #pragma omp critical
                            {
                                if(!visited[n])
                                {
                                    visited[n] = true;
                                    q.push(n);
                                }
                            }
                        }
                    }
                }
            }
            cout<<endl;
        }
};

int main()
{
    Graph g(7);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);

    cout << "Parallel DFS: ";
    g.parallelDFS(0);

    cout << "Parallel BFS: ";
    g.parallelBFS(0);

    return 0;
}