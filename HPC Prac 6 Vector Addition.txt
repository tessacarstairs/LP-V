#include <iostream>
using namespace std;

__global__ void vectorAdd(int* A, int* B, int* C, int N) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    if (i < N) C[i] = A[i] + B[i];
}

int main() {
    int N = 1024;
    size_t size = N * sizeof(int);

    int *A, *B, *C;
    cudaMallocManaged(&A, size);
    cudaMallocManaged(&B, size);
    cudaMallocManaged(&C, size);

    for (int i = 0; i < N; i++) {
        A[i] = i;
        B[i] = 2 * i;
    }

    vectorAdd<<<(N + 255) / 256, 256>>>(A, B, C, N);
    cudaDeviceSynchronize();

    for (int i = 0; i < 10; i++) cout << C[i] << " ";
    cout << endl;

    cudaFree(A); cudaFree(B); cudaFree(C);
    return 0;
}
