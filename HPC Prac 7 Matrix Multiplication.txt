#include <iostream>
using namespace std;

__global__ void matMul(int* A, int* B, int* C, int N) {
    int row = threadIdx.y + blockIdx.y * blockDim.y;
    int col = threadIdx.x + blockIdx.x * blockDim.x;

    if (row < N && col < N) {
        int sum = 0;
        for (int k = 0; k < N; ++k)
            sum += A[row * N + k] * B[k * N + col];
        C[row * N + col] = sum;
    }
}

int main() {
    int N = 2;  // Change size as needed
    size_t size = N * N * sizeof(int);

    int *A, *B, *C;
    cudaMallocManaged(&A, size);
    cudaMallocManaged(&B, size);
    cudaMallocManaged(&C, size);

    for (int i = 0; i < N * N; i++) {
        A[i] = i;
        B[i] = 1;
    }

    dim3 threads(16, 16);
    dim3 blocks((N + 15) / 16, (N + 15) / 16);

    matMul<<<blocks, threads>>>(A, B, C, N);
    cudaDeviceSynchronize();

    for (int i = 0; i < N * N; i++) {
        cout << C[i] << " ";
        if ((i + 1) % N == 0) cout << endl;
    }

    cudaFree(A); cudaFree(B); cudaFree(C);
    return 0;
}
