// merge_sort_simple.cpp
#include <iostream>
#include <omp.h>
using namespace std;

void merge(int* arr, int low, int mid, int high) {
    int n1 = mid - low + 1, n2 = high - mid;
    int* left = new int[n1], *right = new int[n2];
    
    for (int i = 0; i < n1; i++) left[i] = arr[low + i];
    for (int i = 0; i < n2; i++) right[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = low;
    while (i < n1 && j < n2)
        arr[k++] = (left[i] <= right[j]) ? left[i++] : right[j++];
    
    while (i < n1) arr[k++] = left[i++];
    while (j < n2) arr[k++] = right[j++];
    
    delete[] left;
    delete[] right;
}

void mergeSort(int* arr, int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        mergeSort(arr, low, mid);
        mergeSort(arr, mid + 1, high);
        merge(arr, low, mid, high);
    }
}

void parallelMergeSort(int* arr, int low, int high) {
    if (low < high) {
        int mid = (low + high) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            parallelMergeSort(arr, low, mid);
            #pragma omp section
            parallelMergeSort(arr, mid + 1, high);
        }
        merge(arr, low, mid, high);
    }
}

int main() {
    const int n = 100000; // Larger size shows better performance difference
    int* arr1 = new int[n];
    int* arr2 = new int[n];

    for (int i = 0; i < n; i++) arr1[i] = arr2[i] = n - i;

    double t1 = omp_get_wtime();
    mergeSort(arr1, 0, n - 1);
    double t2 = omp_get_wtime();
    cout << "Sequential time: " << t2 - t1 << " seconds\n";

    t1 = omp_get_wtime();
    parallelMergeSort(arr2, 0, n - 1);
    t2 = omp_get_wtime();
    cout << "Parallel time: " << t2 - t1 << " seconds\n";

    delete[] arr1;
    delete[] arr2;
    return 0;
}
